// Generated by CoffeeScript 1.6.3
(function() {
  var Api, apiDatas, fileWatcher, fs, inited, logger, path, _;

  fs = require('fs');

  path = require('path');

  fileWatcher = require('./file_watcher');

  _ = require('lodash');

  logger = require('./logger');

  Api = (function() {
    function Api(url, result) {
      var urlMatchResult;
      this.description = url;
      this.result = result;
      urlMatchResult = /^\[\s*([A-Z]+(\s*,\s*[A-Z]+)*)\s*\]\s*(\/\S*)$/.exec(url);
      if (urlMatchResult === null) {
        throw 'url format error';
      }
      if (urlMatchResult[1] === void 0) {
        this.methods = ['ALL'];
      } else {
        this.methods = urlMatchResult[1].split(',').map(function(method) {
          return method.trim();
        });
      }
      this.url = urlMatchResult[3];
    }

    Api.prototype.match = function(targetUrl, method) {
      var mismatch, placeholders, splitExceptUrl, splitTargetUrl;
      if (!_.contains(this.methods, 'ALL') && !_.contains(this.methods, method)) {
        return {
          mismatch: true
        };
      }
      splitExceptUrl = this.url.substring(1).split('/');
      splitTargetUrl = targetUrl.substring(1).split('/');
      if (splitExceptUrl.length !== splitTargetUrl.length) {
        return {
          mismatch: true
        };
      }
      placeholders = {};
      mismatch = false;
      _.each(splitExceptUrl, function(exceptFragment, index) {
        var targetFragment;
        targetFragment = splitTargetUrl[index];
        if (/^:/.test(exceptFragment)) {
          placeholders[exceptFragment.substring(1)] = targetFragment;
          return true;
        }
        if (exceptFragment !== splitTargetUrl[index]) {
          mismatch = true;
          return false;
        }
      });
      if (mismatch) {
        return {
          mismatch: true
        };
      }
      return {
        mismatch: false,
        placeholders: placeholders
      };
    };

    Api.prototype.getResult = function(url, method, params) {
      if (_.isFunction(this.result)) {
        return this.result(url, method, params);
      } else {
        return this.result;
      }
    };

    return Api;

  })();

  apiDatas = {};

  inited = false;

  module.exports = {
    init: function(apiFilePaths) {
      var loadData;
      apiDatas = {};
      inited = false;
      loadData = function(apiFilePath) {
        var data;
        if (fs.existsSync(apiFilePath)) {
          data = require(apiFilePath);
          apiDatas[apiFilePath] = _.map(data, function(v, k) {
            return new Api(k, v);
          });
          return logger.verbose("[File Loaded] " + apiFilePath);
        } else {
          return logger.info("[File Not Exists] " + apiFilePath);
        }
      };
      _.each(apiFilePaths, loadData);
      logger.info('');
      fileWatcher.watchFiles(apiFilePaths, function(apiFilePath) {
        var err;
        require.cache[apiFilePath] = null;
        try {
          loadData(apiFilePath);
          return logger.info("[File Reload] " + apiFilePath);
        } catch (_error) {
          err = _error;
          return logger.info("[File Reload Error] " + apiFilePath + " - " + err);
        }
      });
      return inited = true;
    },
    getApiData: function(url, method, params) {
      var isAccuraterThen, matchedResult, targetApi;
      if (!inited) {
        throw 'call init(apiFilePaths) before get data';
      }
      isAccuraterThen = function(matchResult1, matchResult2) {
        return _.size(matchResult1.placeholders) < _.size(matchResult2.placeholders);
      };
      targetApi = void 0;
      matchedResult = void 0;
      _.each(apiDatas, function(apis) {
        var skip;
        skip = false;
        _.each(apis, function(api) {
          var matchResult;
          matchResult = api.match(url, method);
          if (matchResult.mismatch) {
            return true;
          }
          if (_.size(matchResult.placeholders) === 0) {
            skip = true;
            targetApi = api;
            matchedResult = matchResult;
            return false;
          }
          if (matchedResult === void 0 || isAccuraterThen(matchResult, matchedResult)) {
            targetApi = api;
            matchedResult = matchResult;
          }
          return true;
        });
        if (skip) {
          return false;
        }
      });
      if (targetApi === void 0) {
        return {
          found: false
        };
      }
      _.assign(params, matchedResult.placeholders);
      return {
        found: true,
        hitted: targetApi.description,
        result: targetApi.getResult(url, method, params)
      };
    }
  };

}).call(this);
